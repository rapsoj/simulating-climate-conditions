stringsAsFactors = FALSE)
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Check the structure and first few entries of the dataframe
str(vehicles_per_1000_df)
head(vehicles_per_1000_df)
# If the column names are loaded incorrectly, you can manually set them
names(vehicles_per_1000_df) <- c("Entity", "Code", "Year", "Registered vehicles per 1,000 people")
dplyr::rename('vehicles_per_1000' = Registered.vehicles.per.1000.people)
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Check the structure and first few entries of the dataframe
str(vehicles_per_1000_df)
head(vehicles_per_1000_df)
# If the column names are loaded incorrectly, you can manually set them
names(vehicles_per_1000_df) <- c("Entity", "Code", "Year", "Registered vehicles per 1,000 people")
dplyr::rename('vehicles_per_1000' = Registered.vehicles.per.1000.people)
print(names(vehicles_per_1000_df))
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
rename(vehicles_per_1000 = `Registered.vehicles.per.1000.people`)
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
rename(vehicles_per_1000 = `Registered vehicles per 1,000 people`)
vehicles_per_1000_df <- vehicles_per_1000_df %>%
rename(vehicles_per_1000 = `Registered vehicles per 1,000 people`)
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
rename(vehicles_per_1000 = "Registered vehicles per 1,000 people")
rlang::last_trace()
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
dplyr::rename(vehicles_per_1000 = "Registered vehicles per 1,000 people")
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
dplyr::rename(vehicles_per_1000 = Registered.vehicles.per.1000.people)
str(vehicles_per_1000_df)
print(names(vehicles_per_1000_df))
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Check the structure and first few entries of the dataframe
str(vehicles_per_1000_df)
head(vehicles_per_1000_df)
# If the column names are loaded incorrectly, you can manually set them
names(vehicles_per_1000_df) <- c("Entity", "Code", "Year", "Registered vehicles per 1,000 people")
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
dplyr::rename('vehicles_per_1000' = Registered.vehicles.per.1000.people)
#### PREPARE WORKSPACE ####
# Move working directory to main folder
setwd("C:/Users/fakuz/OneDrive/Dokumente/GitHub/simulating-climate-conditions")
# Import utils
source("data/utils/geography.R")
# Load libraries
library(dplyr)
#### LOAD AND CLEAN DATA ####
# Load global CO2 equivalent emissions data
ghg_df <- read.csv('data/total-ghg-emissions.csv') %>%
# Rename columns
dplyr::rename('co2eq' = Annual.greenhouse.gas.emissions.in.CO..equivalents) %>%
# Convert from tonnes to kilograms
mutate(co2eq = co2eq * 1000) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load population data
pop_df <- read.csv('data/population.csv') %>%
# Rename columns
dplyr::rename('pop' = Population..historical.estimates.) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Filter to regions that have GHG emissions data
filter(Code %in% ghg_df$Code) %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load data on vehicle emissions
vehicle_emissions_df <- read.csv('data/co2-emissions-from-cars-and-vans-in-the-net-zero-scenario.csv')
if (exists("vehicle_emissions_df")) {
print("DataFrame loaded successfully, here are the column names:")
print(names(vehicle_emissions_df))
} else {
print("DataFrame not loaded.")
}
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Check the structure and first few entries of the dataframe
str(vehicles_per_1000_df)
head(vehicles_per_1000_df)
# If the column names are loaded incorrectly, you can manually set them
names(vehicles_per_1000_df) <- c("Entity", "Code", "Year", "Registered vehicles per 1,000 people")
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
dplyr::rename('vehicles_per_1000' = Registered.vehicles.per.1000.people)
#### PREPARE WORKSPACE ####
# Move working directory to main folder
setwd("C:/Users/fakuz/OneDrive/Dokumente/GitHub/simulating-climate-conditions")
# Import utils
source("data/utils/geography.R")
# Load libraries
library(dplyr)
#### LOAD AND CLEAN DATA ####
# Load global CO2 equivalent emissions data
ghg_df <- read.csv('data/total-ghg-emissions.csv') %>%
# Rename columns
dplyr::rename('co2eq' = Annual.greenhouse.gas.emissions.in.CO..equivalents) %>%
# Convert from tonnes to kilograms
mutate(co2eq = co2eq * 1000) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load population data
pop_df <- read.csv('data/population.csv') %>%
# Rename columns
dplyr::rename('pop' = Population..historical.estimates.) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Filter to regions that have GHG emissions data
filter(Code %in% ghg_df$Code) %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load data on vehicle emissions
vehicle_emissions_df <- read.csv('data/co2-emissions-from-cars-and-vans-in-the-net-zero-scenario.csv')
if (exists("vehicle_emissions_df")) {
print("DataFrame loaded successfully, here are the column names:")
print(names(vehicle_emissions_df))
} else {
print("DataFrame not loaded.")
}
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Check the structure and first few entries of the dataframe
str(vehicles_per_1000_df)
head(vehicles_per_1000_df)
# If the column names are loaded incorrectly, you can manually set them
names(vehicles_per_1000_df) <- c("Entity", "Code", "Year", "Registered vehicles per 1,000 people")
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
dplyr::rename('vehicles_per_1000' = `Registered vehicles per 1,000 people`)
#### CALCULATE IMPACT OF MITIGANT #####
# Define valid variables
country_vars <- ghg_df$Code
percent_reduction_vars <- c(0:100)
# Write printable versions of variable names
country_print <- setNames(as.list(ghg_df$Entity), ghg_df$Code)
# Calculate total vehicles with population data
total_vehicles_df <- merge(vehicles_per_1000_df, pop_df, by = "Code") %>%
mutate(total_vehicles = (vehicles_per_1000 / 1000) * pop)
# Calculate total emissions from vehicles
total_vehicle_emissions <- merge(
# Merge population and per capita vehicle emission dataframes
pop_df, vehicle_emissions_df[, c('Code', 'per_cap_vehicle_co2')],
by = 'Code', all.x = T) %>%
# Group by region
group_by(region) %>%
# Impute missing per capita values using regional averages
mutate(
impute_flag_veh = ifelse(is.na(per_cap_vehicle_co2), "*", ""),
per_cap_vehicle_co2 = if_else(
impute_flag_veh == "*", median(per_cap_vehicle_co2, na.rm = T), per_cap_vehicle_co2)
) %>%
ungroup() %>%
# Group by continent
group_by(continent) %>%
# Impute remaining missing per capita values using continent averages
mutate(
impute_flag_veh = ifelse(is.na(per_cap_vehicle_co2), "**", impute_flag_veh),
per_cap_vehicle_co2 = if_else(
impute_flag_veh == "**", median(per_cap_vehicle_co2, na.rm = T), per_cap_vehicle_co2)
) %>%
# Calculate total vehicle emissions
mutate(
total_vehicle_co2eq = pop * per_cap_vehicle_co2
)
print(names(vehicle_emissions_df))
print(names(vehicle_emissions_df))
print(names(pop_df))
print(names(vehicle_emissions_df))
print(names(vehicles_per_1000_df))
print(names(pop_df))
print(names(vehicle_emissions_df))
print(names(vehicles_per_1000_df))
#### PREPARE WORKSPACE ####
# Move working directory to main folder
setwd("C:/Users/fakuz/OneDrive/Dokumente/GitHub/simulating-climate-conditions")
# Import utils
source("data/utils/geography.R")
# Load libraries
library(dplyr)
#### LOAD AND CLEAN DATA ####
# Load global CO2 equivalent emissions data
ghg_df <- read.csv('data/total-ghg-emissions.csv') %>%
# Rename columns
dplyr::rename('co2eq' = Annual.greenhouse.gas.emissions.in.CO..equivalents) %>%
# Convert from tonnes to kilograms
mutate(co2eq = co2eq * 1000) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load population data
pop_df <- read.csv('data/population.csv') %>%
# Rename columns
dplyr::rename('pop' = Population..historical.estimates.) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Filter to regions that have GHG emissions data
filter(Code %in% ghg_df$Code) %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load data on vehicle emissions
vehicle_emissions_df <- read.csv('data/co2-emissions-from-cars-and-vans-in-the-net-zero-scenario.csv')
if (exists("vehicle_emissions_df")) {
print("DataFrame loaded successfully, here are the column names:")
print(names(vehicle_emissions_df))
} else {
print("DataFrame not loaded.")
}
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Check the structure and first few entries of the dataframe
str(vehicles_per_1000_df)
head(vehicles_per_1000_df)
# If the column names are loaded incorrectly, you can manually set them
names(vehicles_per_1000_df) <- c("Entity", "Code", "Year", "Registered vehicles per 1,000 people")
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
dplyr::rename('vehicles_per_1000' = `Registered vehicles per 1,000 people`)
#### CALCULATE IMPACT OF MITIGANT #####
# Define valid variables
country_vars <- ghg_df$Code
percent_reduction_vars <- c(0:100)
# Write printable versions of variable names
country_print <- setNames(as.list(ghg_df$Entity), ghg_df$Code)
# Calculate total vehicles with population data
total_vehicles_df <- merge(vehicles_per_1000_df, pop_df, by = "Code") %>%
mutate(total_vehicles = (vehicles_per_1000 / 1000) * pop)
# Calculate total emissions from vehicles
total_vehicle_emissions <- merge(
# Merge population and per capita vehicle emission dataframes
pop_df, vehicle_emissions_df[, c('Code', 'Car.and.vans.emissions')],
by = 'Code', all.x = TRUE) %>%
# Group by region
group_by(region) %>%
# Impute missing per capita values using regional averages
mutate(
impute_flag_veh = ifelse(is.na(Car.and.vans.emissions), "*", ""),
Car.and.vans.emissions = if_else(
impute_flag_veh == "*", median(Car.and.vans.emissions, na.rm = TRUE), Car.and.vans.emissions)
) %>%
ungroup() %>%
# Group by continent
group_by(continent) %>%
# Impute remaining missing per capita values using continent averages
mutate(
impute_flag_veh = ifelse(is.na(Car.and.vans.emissions), "**", impute_flag_veh),
Car.and.vans.emissions = if_else(
impute_flag_veh == "**", median(Car.and.vans.emissions, na.rm = TRUE), Car.and.vans.emissions)
) %>%
# Calculate total vehicle emissions
mutate(
total_vehicle_co2eq = pop * Car.and.vans.emissions
)
print(names(vehicle_emissions_df))
print(names(vehicles_per_1000_df))
# Calculate total vehicles with population data
total_vehicles_df <- merge(vehicles_per_1000_df, pop_df, by = "Code") %>%
mutate(total_vehicles = (vehicles_per_1000 / 1000) * pop)
str()
#### PREPARE WORKSPACE ####
# Move working directory to main folder
setwd("C:/Users/fakuz/OneDrive/Dokumente/GitHub/simulating-climate-conditions")
# Import utils
source("data/utils/geography.R")
# Load libraries
library(dplyr)
#### LOAD AND CLEAN DATA ####
# Load global CO2 equivalent emissions data
ghg_df <- read.csv('data/total-ghg-emissions.csv') %>%
# Rename columns
dplyr::rename('co2eq' = Annual.greenhouse.gas.emissions.in.CO..equivalents) %>%
# Convert from tonnes to kilograms
mutate(co2eq = co2eq * 1000) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load population data
pop_df <- read.csv('data/population.csv') %>%
# Rename columns
dplyr::rename('pop' = Population..historical.estimates.) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Filter to regions that have GHG emissions data
filter(Code %in% ghg_df$Code) %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load data on vehicle emissions
vehicle_emissions_df <- read.csv('data/co2-emissions-from-cars-and-vans-in-the-net-zero-scenario.csv')
if (exists("vehicle_emissions_df")) {
print("DataFrame loaded successfully, here are the column names:")
print(names(vehicle_emissions_df))
} else {
print("DataFrame not loaded.")
}
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Check the structure and first few entries of the dataframe
str(vehicles_per_1000_df)
head(vehicles_per_1000_df)
# If the column names are loaded incorrectly, you can manually set them
names(vehicles_per_1000_df) <- c("Entity", "Code", "Year", "Registered vehicles per 1,000 people")
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
dplyr::rename('vehicles_per_1000' = `Registered vehicles per 1,000 people`)
#### CALCULATE IMPACT OF MITIGANT #####
# Define valid variables
country_vars <- ghg_df$Code
percent_reduction_vars <- c(0:100)
# Write printable versions of variable names
country_print <- setNames(as.list(ghg_df$Entity), ghg_df$Code)
# Calculate total vehicles with population data
total_vehicles_df <- merge(vehicles_per_1000_df, pop_df, by = "Code") %>%
mutate(total_vehicles = (vehicles_per_1000 / 1000) * pop)
# Calculate total emissions from vehicles
total_vehicle_emissions <- merge(
# Merge population and per capita vehicle emission dataframes
pop_df, vehicle_emissions_df[, c('Code', 'Car.and.vans.emissions')],
by = 'Code', all.x = TRUE) %>%
mutate(
total_vehicle_co2eq = pop * Car.and.vans.emissions
)
print(names(vehicle_emissions_df))
print(names(pop_df))
#### PREPARE WORKSPACE ####
# Move working directory to main folder
setwd("C:/Users/fakuz/OneDrive/Dokumente/GitHub/simulating-climate-conditions")
# Import utils
source("data/utils/geography.R")
# Load libraries
library(dplyr)
#### LOAD AND CLEAN DATA ####
# Load global CO2 equivalent emissions data
ghg_df <- read.csv('data/total-ghg-emissions.csv') %>%
# Rename columns
dplyr::rename('co2eq' = Annual.greenhouse.gas.emissions.in.CO..equivalents) %>%
# Convert from tonnes to kilograms
mutate(co2eq = co2eq * 1000) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load population data
pop_df <- read.csv('data/population.csv') %>%
# Rename columns
dplyr::rename('pop' = Population..historical.estimates.) %>%
# Filter to most recent year
filter(Year == max(Year)) %>%
# Filter to country-level
filter(Code != '') %>%
# Filter to regions that have GHG emissions data
filter(Code %in% ghg_df$Code) %>%
# Link regions
merge(stack(regions), by.x = "Code", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('region' = ind) %>%
# Link continents
merge(stack(continents), by.x = "region", by.y = "values", all.x = T) %>%
# Rename columns
dplyr::rename('continent' = ind)
# Load data on vehicle emissions
vehicle_emissions_df <- read.csv('data/co2-emissions-from-cars-and-vans-in-the-net-zero-scenario.csv')
if (exists("vehicle_emissions_df")) {
print("DataFrame loaded successfully, here are the column names:")
print(names(vehicle_emissions_df))
} else {
print("DataFrame not loaded.")
}
# Load data on registered vehicles per 1000 people
vehicles_per_1000_df <- read.csv('data/registered-vehicles-per-1000-people.csv',
fileEncoding = "UTF-8-BOM",
check.names = FALSE,
stringsAsFactors = FALSE)
# Check the structure and first few entries of the dataframe
str(vehicles_per_1000_df)
head(vehicles_per_1000_df)
# If the column names are loaded incorrectly, you can manually set them
names(vehicles_per_1000_df) <- c("Entity", "Code", "Year", "Registered vehicles per 1,000 people")
print(names(vehicles_per_1000_df))
vehicles_per_1000_df <- vehicles_per_1000_df %>%
dplyr::rename('vehicles_per_1000' = `Registered vehicles per 1,000 people`)
#### CALCULATE IMPACT OF MITIGANT #####
# Define valid variables
country_vars <- ghg_df$Code
percent_reduction_vars <- c(0:100)
# Write printable versions of variable names
country_print <- setNames(as.list(ghg_df$Entity), ghg_df$Code)
# Calculate total vehicles with population data
total_vehicles_df <- merge(vehicles_per_1000_df, pop_df, by = "Code") %>%
mutate(total_vehicles = (vehicles_per_1000 / 1000) * pop)
# Calculate total emissions from vehicles
total_vehicle_emissions <- merge(
# Merge population and per capita vehicle emission dataframes
pop_df, vehicle_emissions_df[, c('Code', 'Car.and.vans.emissions')],
by = 'Code', all.x = TRUE) %>%
mutate(
total_vehicle_co2eq = pop * Car.and.vans.emissions
)
